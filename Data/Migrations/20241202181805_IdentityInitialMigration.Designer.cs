// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(TFOMSContext))]
    [Migration("20241202181805_IdentityInitialMigration")]
    partial class IdentityInitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Data.Model.Entities.Dictionary.BatchNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("BatchNumbers", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.BedMedProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("BedMedProfiles", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.CancerMarker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("CancerMarkers", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.CancerMarkerValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<int>("CancerMarkerId")
                        .HasColumnType("int");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("CancerMarkerId");

                    b.HasIndex("Code");

                    b.ToTable("CancerMarkerValues", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.CharacterDisease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("CharacterDiseases", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.ClassificationCriterion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("ClassificationCriterions", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.CombinationTreatment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("SchemeCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("CombinationTreatments", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.ConsultationPurpose", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("ConsultationPurposes", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.Contraindication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("Contraindications", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.ControlType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("ControlTypes", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.Diagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActual")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("Diagnoses", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.DiagnosticMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("DiagnosticMethods", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.DirectionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("DirectionTypes", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<string>("DocNumberFormat")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("DocSerFormat")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("DocumentTypes", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.DrugTherapyCycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("DrugTherapyCycles", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.DrugTherapyLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("DrugTherapyLines", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.ExcludingExpert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("ExcludingExperts", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.ExpertReestr", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("BeginDateExpert")
                        .HasColumnType("date");

                    b.Property<string>("CodeExpert")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountExamination")
                        .HasColumnType("int");

                    b.Property<int>("CountIncorrectConclusion")
                        .HasColumnType("int");

                    b.Property<int>("CountMedicalCompany")
                        .HasColumnType("int");

                    b.Property<int>("CountSluch")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("ExcludingDateExpert")
                        .HasColumnType("date");

                    b.Property<int>("ExcludingExpertId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NameSubject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OKTMO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReestrNumberExpert")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UidExpert")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ExcludingExpertId");

                    b.HasIndex("UidExpert");

                    b.ToTable("ExpertReestrs", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.FormPom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.ToTable("FormPoms", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.HistologicalExaminationResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("HistologicalFeatureId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("HistologicalFeatureId");

                    b.ToTable("HistologicalExaminationResults", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.HistologicalFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("HistologicalFeatures", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.InjectionMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("InjectionMethods", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.InsuranceCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("INN")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("KPP")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("OGRN")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("InsuranceCompanies");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.Ishod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<int>("UMPId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UMPId");

                    b.ToTable("Ishods", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.KPG", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Coefficient")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<int>("UMPId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("UMPId");

                    b.ToTable("KPGs", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.KSG", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Coefficient")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<int>("UMPId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("UMPId");

                    b.ToTable("KSGs", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.KSLP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<int>("UMPId")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,5)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("UMPId");

                    b.ToTable("KSLPs", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.MedProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("MedProfiles", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.MedSpecial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<int>("CodeJobNSI")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("NameSpec")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("MedSpecials", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.MedicalDeviceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActual")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNPA")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("RZN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("MedicalDeviceTypes", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.MedicalService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOut")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActual")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("MedicalServices", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.Medication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("Medications", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.Metastasis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<int>("DiagnosisId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("DiagnosisId");

                    b.ToTable("Metastasises", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.Nodus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<int>("DiagnosisId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("DiagnosisId");

                    b.ToTable("Noduses", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.OKATO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<decimal>("ChangeNumber")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateApproval")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEffective")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("RegionCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("SectionCode")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("VillageCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("VillageCounsilCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("Id");

                    b.ToTable("OKATOs", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.PatientVMPModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("PatientVMPModels", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.PolicyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("PolicyTypes", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.RadiationTherapyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("RadiationTherapyTypes", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.ReasonAppeal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("ReasonAppeals", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.RefusalReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("CodePD")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeTypeControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CoefNonPayment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CoefPenalty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("RefusalReasons", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.Result", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<int>("UMPId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UMPId");

                    b.ToTable("Results", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.ResultDisp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("ResultDisps", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.Stage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<int>("DiagnosisId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("DiagnosisId");

                    b.ToTable("Stages", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.SurgeryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("SurgeryTypes", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.TreatmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("TreatmentTypes", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.Tumor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<int>("DiagnosisId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("DiagnosisId");

                    b.ToTable("Tumors", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.TypeDisp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("ValidResultDisp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("TypeDisps", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.UMP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("UMPs", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Coefficient")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<int>("ConversionId")
                        .HasColumnType("int");

                    b.Property<string>("ConversionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Measurement")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("OKEICode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PrintName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UCUMCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("Units", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.VMPMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("HGR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HMODP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientVMPModelId")
                        .HasColumnType("int");

                    b.Property<int>("VidVMPId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("PatientVMPModelId");

                    b.HasIndex("VidVMPId");

                    b.ToTable("VMPMethods", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.VidPom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.ToTable("VidPoms", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.VidSluch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsCZ")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConsDiagn")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDisp")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGem")
                        .HasColumnType("bit");

                    b.Property<bool>("IsKons")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMob")
                        .HasColumnType("bit");

                    b.Property<bool>("IsObr")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPos")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProf")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReab")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTelemed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVMP")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<int>("UMPId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UMPId");

                    b.ToTable("VidSluchs", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.VidVMP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VMPGrupNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("VidVMPs", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.VisitPurpose", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("VisitPurposes", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.CancerCase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BodyArea")
                        .HasColumnType("decimal(3,2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("FractionsNumber")
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMetastasis")
                        .HasColumnType("bit");

                    b.Property<int>("MetastasisId")
                        .HasColumnType("int");

                    b.Property<int>("NodusId")
                        .HasColumnType("int");

                    b.Property<int>("ReasonAppealId")
                        .HasColumnType("int");

                    b.Property<Guid>("SLCaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StageId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalFocalDose")
                        .HasColumnType("decimal(6,2)");

                    b.Property<int>("TumorId")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(4,1)");

                    b.HasKey("Id");

                    b.HasIndex("MetastasisId");

                    b.HasIndex("NodusId");

                    b.HasIndex("ReasonAppealId");

                    b.HasIndex("SLCaseId");

                    b.HasIndex("StageId");

                    b.HasIndex("TumorId");

                    b.ToTable("CancerCases", "zap");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.CancerMedicinalProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CancerServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DrugRegimenCodeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CancerServiceId");

                    b.HasIndex("DrugRegimenCodeId");

                    b.HasIndex("MedicationId");

                    b.ToTable("CancerMedicinalProducts", "zap");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.CancerService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CancerCaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DrugTherapyCycleId")
                        .HasColumnType("int");

                    b.Property<int>("DrugTherapyLineId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPreventingNausea")
                        .HasColumnType("bit");

                    b.Property<int>("RadiationTherapyTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SurgeryTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TreatmentTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CancerCaseId");

                    b.HasIndex("DrugTherapyCycleId");

                    b.HasIndex("DrugTherapyLineId");

                    b.HasIndex("RadiationTherapyTypeId");

                    b.HasIndex("SurgeryTypeId");

                    b.HasIndex("TreatmentTypeId");

                    b.ToTable("CancerServices", "zap");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.ConcomitantDisease", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DiagnosisId")
                        .HasColumnType("int");

                    b.Property<int>("DispensaryObservation")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFirstInstalled")
                        .HasColumnType("bit");

                    b.Property<Guid>("SLCaseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisId");

                    b.HasIndex("SLCaseId");

                    b.ToTable("ConcomitantDiseases", "zap");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.ContraindicationBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CancerCaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ContraindicationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CancerCaseId");

                    b.HasIndex("ContraindicationId");

                    b.ToTable("ContraindicationBlocks", "zap");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.DiagnosticBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CancerCaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CancerMarkerId")
                        .HasColumnType("int");

                    b.Property<int>("CancerMarkerValueId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DiagnosticIndicatorType")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("HistologicalExaminationResultId")
                        .HasColumnType("int");

                    b.Property<int>("HistologicalFeatureId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsResultReceive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CancerCaseId");

                    b.HasIndex("CancerMarkerId");

                    b.HasIndex("CancerMarkerValueId");

                    b.HasIndex("HistologicalExaminationResultId");

                    b.HasIndex("HistologicalFeatureId");

                    b.ToTable("DiagnosticBlocks", "zap");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.DifficultyCoefficient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("KSGKPGId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("KSLPId")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,5)");

                    b.HasKey("Id");

                    b.HasIndex("KSGKPGId");

                    b.HasIndex("KSLPId");

                    b.ToTable("DifficultyCoefficients", "zap");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.DispensaryReferral", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BedMedProfileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DiagnosticResearchMethodId")
                        .HasColumnType("int");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MedProfileId")
                        .HasColumnType("int");

                    b.Property<int>("MedSpecialId")
                        .HasColumnType("int");

                    b.Property<int>("MedicalCompanyId")
                        .HasColumnType("int");

                    b.Property<int>("MedicalServiceId")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("ReferralType")
                        .HasColumnType("int");

                    b.Property<Guid>("SLCaseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BedMedProfileId");

                    b.HasIndex("DiagnosticResearchMethodId");

                    b.HasIndex("MedProfileId");

                    b.HasIndex("MedSpecialId");

                    b.HasIndex("MedicalCompanyId");

                    b.HasIndex("MedicalServiceId");

                    b.HasIndex("SLCaseId");

                    b.ToTable("DispensaryReferrals", "zap");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.Implant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MedicalDeviceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("USLServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MedicalDeviceTypeId");

                    b.HasIndex("USLServiceId");

                    b.ToTable("Implants", "zap");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("InvDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("InvoiceFileTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MainInvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("MedicalCompanyId")
                        .HasColumnType("int");

                    b.Property<decimal>("PaySum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RecordsNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("SankSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TypeDispId")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceFileTypeId");

                    b.HasIndex("MainInvoiceId");

                    b.HasIndex("MedicalCompanyId");

                    b.HasIndex("TypeDispId");

                    b.ToTable("Invoices", "inv");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.InvoiceFileType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApiAdress")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EditUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("FileExt")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.ToTable("InvoiceFileTypes", "dict");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.KSGKPG", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BaseRate")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("CostCoefficient")
                        .HasColumnType("decimal(7,5)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<decimal>("DifferentiationCoefficient")
                        .HasColumnType("decimal(7,5)");

                    b.Property<decimal>("DifficultyCoefficient")
                        .HasColumnType("decimal(6,5)");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsKSLP")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSubgroupKSG")
                        .HasColumnType("bit");

                    b.Property<int>("KPGId")
                        .HasColumnType("int");

                    b.Property<int>("KSGId")
                        .HasColumnType("int");

                    b.Property<int>("KSGModel")
                        .HasColumnType("int");

                    b.Property<decimal>("LevelCoefficient")
                        .HasColumnType("decimal(7,5)");

                    b.Property<decimal>("ManagementCoefficient")
                        .HasColumnType("decimal(7,5)");

                    b.Property<Guid>("SlCaseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("KPGId");

                    b.HasIndex("KSGId");

                    b.HasIndex("SlCaseId");

                    b.ToTable("KSGKPGs", "zap");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.KSGKPGClassificationCriterion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClassificationCriterionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("KSGKPGId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassificationCriterionId");

                    b.HasIndex("KSGKPGId");

                    b.ToTable("KSGKPGClassificationCriterions", "zap");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.MainInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BatchNumberId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("InvDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MedicalCompanyId")
                        .HasColumnType("int");

                    b.Property<decimal>("PaySum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<decimal>("SankSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("WeekNumber")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BatchNumberId");

                    b.HasIndex("MedicalCompanyId");

                    b.ToTable("MainInvoices", "inv");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.MedicinalProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CombinationTreatmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("InjectionMethodId")
                        .HasColumnType("int");

                    b.Property<int>("InjectionsNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LabelCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.Property<Guid>("SLCaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitValue")
                        .HasColumnType("decimal(7,2)");

                    b.HasKey("Id");

                    b.HasIndex("CombinationTreatmentId");

                    b.HasIndex("InjectionMethodId");

                    b.HasIndex("MedicationId");

                    b.HasIndex("SLCaseId");

                    b.HasIndex("UnitId");

                    b.ToTable("MedicinalProducts", "zap");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.Referral", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DiagnosticResearchMethodId")
                        .HasColumnType("int");

                    b.Property<int>("DirectionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MedicalCompanyId")
                        .HasColumnType("int");

                    b.Property<int>("MedicalServiceId")
                        .HasColumnType("int");

                    b.Property<Guid>("SLCaseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosticResearchMethodId");

                    b.HasIndex("DirectionTypeId");

                    b.HasIndex("MedicalCompanyId");

                    b.HasIndex("MedicalServiceId");

                    b.HasIndex("SLCaseId");

                    b.ToTable("Referrals", "zap");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.SLCase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BedMedProfileId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterDiseaseId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ConcomitantMedicalCareStandard")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DispensaryObservation")
                        .HasColumnType("int");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("DoctorSpecialtyId")
                        .HasColumnType("int");

                    b.Property<int>("DurationHospitalization")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("EndTreatmentDate")
                        .HasColumnType("date");

                    b.Property<string>("IdCase")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCancer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsChildrenProfile")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRehabilitation")
                        .HasColumnType("bit");

                    b.Property<int>("MedProfileId")
                        .HasColumnType("int");

                    b.Property<string>("MedSpecialVersion")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("MedicalCareStandard")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("MedicalCompanyDepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("MedicalCompanyUnitId")
                        .HasColumnType("int");

                    b.Property<string>("NumberHistory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("PayUnits")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PlannedHospitalizationDate")
                        .HasColumnType("date");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartTreatmentDate")
                        .HasColumnType("date");

                    b.Property<string>("TicketNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("TicketReceiveDate")
                        .HasColumnType("date");

                    b.Property<decimal>("TotalSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TransferSign")
                        .HasColumnType("int");

                    b.Property<int>("VMPMethodId")
                        .HasColumnType("int");

                    b.Property<int>("VidVMPId")
                        .HasColumnType("int");

                    b.Property<int>("VisitPurposeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ZapMainRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BedMedProfileId");

                    b.HasIndex("CharacterDiseaseId");

                    b.HasIndex("DoctorSpecialtyId");

                    b.HasIndex("MedProfileId");

                    b.HasIndex("MedicalCompanyDepartmentId");

                    b.HasIndex("MedicalCompanyUnitId");

                    b.HasIndex("VMPMethodId");

                    b.HasIndex("VidVMPId");

                    b.HasIndex("VisitPurposeId");

                    b.HasIndex("ZapMainRecordId");

                    b.ToTable("SLCases", "zap");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.SLCaseDiagnosis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DiagnosisId")
                        .HasColumnType("int");

                    b.Property<int>("DiagnosisType")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFirstInstalled")
                        .HasColumnType("bit");

                    b.Property<Guid>("SLCaseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisId");

                    b.HasIndex("SLCaseId");

                    b.ToTable("SLCaseDiagnoses", "zap");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.SLCaseSanction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("SLCaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SanctionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SLCaseId");

                    b.HasIndex("SanctionId");

                    b.ToTable("SLCaseSanctions", "zap");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.Sanction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ActDate")
                        .HasColumnType("date");

                    b.Property<string>("ActNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)");

                    b.Property<int>("ControlTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("RefusalReasonId")
                        .HasColumnType("int");

                    b.Property<string>("SanctionId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("Source")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ZAPMainRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ControlTypeId");

                    b.HasIndex("RefusalReasonId");

                    b.HasIndex("ZAPMainRecordId");

                    b.ToTable("Sanctions", "zap");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.SanctionExpert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("ExpertReestrId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("SanctionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExpertReestrId");

                    b.HasIndex("SanctionId");

                    b.ToTable("SanctionExperts", "zap");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.USLService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<int>("DiagnosisId")
                        .HasColumnType("int");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("IdService")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("IncompleteVolume")
                        .HasColumnType("int");

                    b.Property<bool>("IsChildrenProfile")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRefusal")
                        .HasColumnType("bit");

                    b.Property<int>("MedProfileId")
                        .HasColumnType("int");

                    b.Property<int>("MedSpecialId")
                        .HasColumnType("int");

                    b.Property<int>("MedicalCompanyDepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("MedicalCompanyId")
                        .HasColumnType("int");

                    b.Property<int>("MedicalCompanyUnitId")
                        .HasColumnType("int");

                    b.Property<int>("MedicalInterventionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MedicalServiceId")
                        .HasColumnType("int");

                    b.Property<decimal>("NumberServices")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("SlCaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VMPMethodId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisId");

                    b.HasIndex("MedProfileId");

                    b.HasIndex("MedSpecialId");

                    b.HasIndex("MedicalCompanyDepartmentId");

                    b.HasIndex("MedicalCompanyId");

                    b.HasIndex("MedicalCompanyUnitId");

                    b.HasIndex("MedicalInterventionTypeId");

                    b.HasIndex("MedicalServiceId");

                    b.HasIndex("SlCaseId");

                    b.HasIndex("VMPMethodId");

                    b.ToTable("USLServices", "zap");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.ZAPMainRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("DirectedDate")
                        .HasColumnType("date");

                    b.Property<int>("DirectedMOId")
                        .HasColumnType("int");

                    b.Property<int>("DurationHospitalization")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("EndTreatmentDate")
                        .HasColumnType("date");

                    b.Property<int>("FormPomId")
                        .HasColumnType("int");

                    b.Property<int>("InvGroup")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIntrahospitalTransfer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMSE")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMobileMedicalTeam")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPay")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRefusal")
                        .HasColumnType("bit");

                    b.Property<string>("IsSpecialCase")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IshodId")
                        .HasColumnType("int");

                    b.Property<int>("MedicalCompanyId")
                        .HasColumnType("int");

                    b.Property<string>("NewBorn")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("NewBornWeight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("NumberCase")
                        .HasColumnType("int");

                    b.Property<int>("Pay")
                        .HasColumnType("int");

                    b.Property<decimal>("PaySum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PolicyId")
                        .HasColumnType("int");

                    b.Property<int>("ResultDispId")
                        .HasColumnType("int");

                    b.Property<int>("ResultId")
                        .HasColumnType("int");

                    b.Property<decimal>("SankSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartTreatmentDate")
                        .HasColumnType("date");

                    b.Property<decimal>("TotalSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UMPId")
                        .HasColumnType("int");

                    b.Property<int>("VidPomId")
                        .HasColumnType("int");

                    b.Property<int>("VidSluchId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DirectedMOId");

                    b.HasIndex("FormPomId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("IshodId");

                    b.HasIndex("MedicalCompanyId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("PersonId");

                    b.HasIndex("PolicyId");

                    b.HasIndex("ResultDispId");

                    b.HasIndex("ResultId");

                    b.HasIndex("UMPId");

                    b.HasIndex("VidPomId");

                    b.HasIndex("VidSluchId");

                    b.ToTable("ZAPMainRecords", "zap");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.Сoncilium", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ConsultationPurposeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("SLCaseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ConsultationPurposeId");

                    b.HasIndex("SLCaseId");

                    b.ToTable("Сonciliums", "zap");
                });

            modelBuilder.Entity("Data.Model.Entities.MedicalCompany.MedicalCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FRMOId")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("INN")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("KPP")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("OGRN")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("OKATOId")
                        .HasColumnType("int");

                    b.Property<string>("ReestrNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)");

                    b.HasKey("Id");

                    b.ToTable("MedicalCompanies", "LPU");
                });

            modelBuilder.Entity("Data.Model.Entities.MedicalCompany.MedicalCompanyDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MedProfileId")
                        .HasColumnType("int");

                    b.Property<int>("MedicalCompanyId")
                        .HasColumnType("int");

                    b.Property<int>("MedicalCompanyUnitId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("OldCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("UMPId")
                        .HasColumnType("int");

                    b.Property<int>("VidPomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedProfileId");

                    b.HasIndex("MedicalCompanyId");

                    b.HasIndex("MedicalCompanyUnitId");

                    b.HasIndex("UMPId");

                    b.HasIndex("VidPomId");

                    b.ToTable("MedicalCompanyDepartments", "LPU");
                });

            modelBuilder.Entity("Data.Model.Entities.MedicalCompany.MedicalCompanyUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CodeMain")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("FRMOId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MedicalCompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("MedicalCompanyId");

                    b.ToTable("MedicalCompanyUnits", "LPU");
                });

            modelBuilder.Entity("Data.Model.Entities.MedicalCompany.OrganizationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("OrganizationTypes", "LPU");
                });

            modelBuilder.Entity("Data.Model.Entities.Person.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<string>("ENP")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsBad")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("SNILS")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Data.Model.Entities.Policy.Policy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<string>("ENP")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InsuranceCompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("OKATO")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PolicyTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("PolicyTypeId");

                    b.ToTable("Policies");
                });

            modelBuilder.Entity("Data.Model.Entities.UploadedFile.SpiskiNaDDFromMO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("N_reest")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Npp")
                        .HasColumnType("int");

                    b.Property<string>("Organizaciya")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<string>("Snils")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SpiskiNaDDFromMO");
                });

            modelBuilder.Entity("Data.Model.Entities.Users.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.CancerMarkerValue", b =>
                {
                    b.HasOne("Data.Model.Entities.Dictionary.CancerMarker", "CancerMarker")
                        .WithMany()
                        .HasForeignKey("CancerMarkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CancerMarker");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.ExpertReestr", b =>
                {
                    b.HasOne("Data.Model.Entities.Dictionary.ExcludingExpert", "ExcludingExpert")
                        .WithMany()
                        .HasForeignKey("ExcludingExpertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExcludingExpert");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.HistologicalExaminationResult", b =>
                {
                    b.HasOne("Data.Model.Entities.Dictionary.HistologicalFeature", "HistologicalFeature")
                        .WithMany()
                        .HasForeignKey("HistologicalFeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HistologicalFeature");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.Ishod", b =>
                {
                    b.HasOne("Data.Model.Entities.Dictionary.UMP", "UMP")
                        .WithMany()
                        .HasForeignKey("UMPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UMP");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.KPG", b =>
                {
                    b.HasOne("Data.Model.Entities.Dictionary.UMP", "UMP")
                        .WithMany()
                        .HasForeignKey("UMPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UMP");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.KSG", b =>
                {
                    b.HasOne("Data.Model.Entities.Dictionary.UMP", "UMP")
                        .WithMany()
                        .HasForeignKey("UMPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UMP");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.KSLP", b =>
                {
                    b.HasOne("Data.Model.Entities.Dictionary.UMP", "UMP")
                        .WithMany()
                        .HasForeignKey("UMPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UMP");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.Metastasis", b =>
                {
                    b.HasOne("Data.Model.Entities.Dictionary.Diagnosis", "Diagnosis")
                        .WithMany()
                        .HasForeignKey("DiagnosisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagnosis");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.Nodus", b =>
                {
                    b.HasOne("Data.Model.Entities.Dictionary.Diagnosis", "Diagnosis")
                        .WithMany()
                        .HasForeignKey("DiagnosisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagnosis");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.Result", b =>
                {
                    b.HasOne("Data.Model.Entities.Dictionary.UMP", "UMP")
                        .WithMany()
                        .HasForeignKey("UMPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UMP");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.Stage", b =>
                {
                    b.HasOne("Data.Model.Entities.Dictionary.Diagnosis", "Diagnosis")
                        .WithMany()
                        .HasForeignKey("DiagnosisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagnosis");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.Tumor", b =>
                {
                    b.HasOne("Data.Model.Entities.Dictionary.Diagnosis", "Diagnosis")
                        .WithMany()
                        .HasForeignKey("DiagnosisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagnosis");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.VMPMethod", b =>
                {
                    b.HasOne("Data.Model.Entities.Dictionary.PatientVMPModel", "PatientVMPModel")
                        .WithMany()
                        .HasForeignKey("PatientVMPModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.VidVMP", "VidVMP")
                        .WithMany()
                        .HasForeignKey("VidVMPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientVMPModel");

                    b.Navigation("VidVMP");
                });

            modelBuilder.Entity("Data.Model.Entities.Dictionary.VidSluch", b =>
                {
                    b.HasOne("Data.Model.Entities.Dictionary.UMP", "UMP")
                        .WithMany()
                        .HasForeignKey("UMPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UMP");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.CancerCase", b =>
                {
                    b.HasOne("Data.Model.Entities.Dictionary.Metastasis", "Metastasis")
                        .WithMany()
                        .HasForeignKey("MetastasisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.Nodus", "Nodus")
                        .WithMany()
                        .HasForeignKey("NodusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.ReasonAppeal", "ReasonAppeal")
                        .WithMany()
                        .HasForeignKey("ReasonAppealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Invoice.SLCase", "SLCase")
                        .WithMany()
                        .HasForeignKey("SLCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.Stage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.Tumor", "Tumor")
                        .WithMany()
                        .HasForeignKey("TumorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Metastasis");

                    b.Navigation("Nodus");

                    b.Navigation("ReasonAppeal");

                    b.Navigation("SLCase");

                    b.Navigation("Stage");

                    b.Navigation("Tumor");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.CancerMedicinalProduct", b =>
                {
                    b.HasOne("Data.Model.Entities.Invoice.CancerService", "CancerService")
                        .WithMany()
                        .HasForeignKey("CancerServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.ClassificationCriterion", "DrugRegimenCode")
                        .WithMany()
                        .HasForeignKey("DrugRegimenCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.Medication", "Medication")
                        .WithMany()
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CancerService");

                    b.Navigation("DrugRegimenCode");

                    b.Navigation("Medication");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.CancerService", b =>
                {
                    b.HasOne("Data.Model.Entities.Invoice.CancerCase", "CancerCase")
                        .WithMany()
                        .HasForeignKey("CancerCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.DrugTherapyCycle", "DrugTherapyCycle")
                        .WithMany()
                        .HasForeignKey("DrugTherapyCycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.DrugTherapyLine", "DrugTherapyLine")
                        .WithMany()
                        .HasForeignKey("DrugTherapyLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.RadiationTherapyType", "RadiationTherapyType")
                        .WithMany()
                        .HasForeignKey("RadiationTherapyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.SurgeryType", "SurgeryType")
                        .WithMany()
                        .HasForeignKey("SurgeryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.TreatmentType", "TreatmentType")
                        .WithMany()
                        .HasForeignKey("TreatmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CancerCase");

                    b.Navigation("DrugTherapyCycle");

                    b.Navigation("DrugTherapyLine");

                    b.Navigation("RadiationTherapyType");

                    b.Navigation("SurgeryType");

                    b.Navigation("TreatmentType");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.ConcomitantDisease", b =>
                {
                    b.HasOne("Data.Model.Entities.Dictionary.Diagnosis", "Diagnosis")
                        .WithMany()
                        .HasForeignKey("DiagnosisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Invoice.SLCase", "SLCase")
                        .WithMany()
                        .HasForeignKey("SLCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagnosis");

                    b.Navigation("SLCase");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.ContraindicationBlock", b =>
                {
                    b.HasOne("Data.Model.Entities.Invoice.CancerCase", "CancerCase")
                        .WithMany()
                        .HasForeignKey("CancerCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.Contraindication", "Contraindication")
                        .WithMany()
                        .HasForeignKey("ContraindicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CancerCase");

                    b.Navigation("Contraindication");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.DiagnosticBlock", b =>
                {
                    b.HasOne("Data.Model.Entities.Invoice.CancerCase", "CancerCase")
                        .WithMany()
                        .HasForeignKey("CancerCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.CancerMarker", "CancerMarker")
                        .WithMany()
                        .HasForeignKey("CancerMarkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.CancerMarkerValue", "CancerMarkerValue")
                        .WithMany()
                        .HasForeignKey("CancerMarkerValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.HistologicalExaminationResult", "HistologicalExaminationResult")
                        .WithMany()
                        .HasForeignKey("HistologicalExaminationResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.HistologicalFeature", "HistologicalFeature")
                        .WithMany()
                        .HasForeignKey("HistologicalFeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CancerCase");

                    b.Navigation("CancerMarker");

                    b.Navigation("CancerMarkerValue");

                    b.Navigation("HistologicalExaminationResult");

                    b.Navigation("HistologicalFeature");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.DifficultyCoefficient", b =>
                {
                    b.HasOne("Data.Model.Entities.Invoice.KSGKPG", "KSGKPG")
                        .WithMany()
                        .HasForeignKey("KSGKPGId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.KSLP", "KSLP")
                        .WithMany()
                        .HasForeignKey("KSLPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KSGKPG");

                    b.Navigation("KSLP");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.DispensaryReferral", b =>
                {
                    b.HasOne("Data.Model.Entities.Dictionary.BedMedProfile", "BedMedProfile")
                        .WithMany()
                        .HasForeignKey("BedMedProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.DiagnosticMethod", "DiagnosticResearchMethod")
                        .WithMany()
                        .HasForeignKey("DiagnosticResearchMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.MedProfile", "MedProfile")
                        .WithMany()
                        .HasForeignKey("MedProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.MedSpecial", "MedSpecial")
                        .WithMany()
                        .HasForeignKey("MedSpecialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.MedicalCompany.MedicalCompany", "MedicalCompany")
                        .WithMany()
                        .HasForeignKey("MedicalCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.MedicalService", "MedicalService")
                        .WithMany()
                        .HasForeignKey("MedicalServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Invoice.SLCase", "SLCase")
                        .WithMany()
                        .HasForeignKey("SLCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BedMedProfile");

                    b.Navigation("DiagnosticResearchMethod");

                    b.Navigation("MedProfile");

                    b.Navigation("MedSpecial");

                    b.Navigation("MedicalCompany");

                    b.Navigation("MedicalService");

                    b.Navigation("SLCase");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.Implant", b =>
                {
                    b.HasOne("Data.Model.Entities.Dictionary.MedicalDeviceType", "MedicalDeviceType")
                        .WithMany()
                        .HasForeignKey("MedicalDeviceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Invoice.USLService", "USLService")
                        .WithMany()
                        .HasForeignKey("USLServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalDeviceType");

                    b.Navigation("USLService");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.Invoice", b =>
                {
                    b.HasOne("Data.Model.Entities.Invoice.InvoiceFileType", "InvoiceFileType")
                        .WithMany()
                        .HasForeignKey("InvoiceFileTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Invoice.MainInvoice", "MainInvoice")
                        .WithMany()
                        .HasForeignKey("MainInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.MedicalCompany.MedicalCompany", "MedicalCompany")
                        .WithMany()
                        .HasForeignKey("MedicalCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.TypeDisp", "TypeDisp")
                        .WithMany()
                        .HasForeignKey("TypeDispId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvoiceFileType");

                    b.Navigation("MainInvoice");

                    b.Navigation("MedicalCompany");

                    b.Navigation("TypeDisp");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.KSGKPG", b =>
                {
                    b.HasOne("Data.Model.Entities.Dictionary.KPG", "KPG")
                        .WithMany()
                        .HasForeignKey("KPGId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.KSG", "KSG")
                        .WithMany()
                        .HasForeignKey("KSGId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Invoice.SLCase", "SlCase")
                        .WithMany()
                        .HasForeignKey("SlCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KPG");

                    b.Navigation("KSG");

                    b.Navigation("SlCase");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.KSGKPGClassificationCriterion", b =>
                {
                    b.HasOne("Data.Model.Entities.Dictionary.ClassificationCriterion", "ClassificationCriterion")
                        .WithMany()
                        .HasForeignKey("ClassificationCriterionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Invoice.KSGKPG", "KSGKPG")
                        .WithMany()
                        .HasForeignKey("KSGKPGId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassificationCriterion");

                    b.Navigation("KSGKPG");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.MainInvoice", b =>
                {
                    b.HasOne("Data.Model.Entities.Dictionary.BatchNumber", "BatchNumber")
                        .WithMany()
                        .HasForeignKey("BatchNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.MedicalCompany.MedicalCompany", "MedicalCompany")
                        .WithMany()
                        .HasForeignKey("MedicalCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BatchNumber");

                    b.Navigation("MedicalCompany");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.MedicinalProduct", b =>
                {
                    b.HasOne("Data.Model.Entities.Dictionary.CombinationTreatment", "CombinationTreatment")
                        .WithMany()
                        .HasForeignKey("CombinationTreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.InjectionMethod", "InjectionMethod")
                        .WithMany()
                        .HasForeignKey("InjectionMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.Medication", "Medication")
                        .WithMany()
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Invoice.SLCase", "SLCase")
                        .WithMany()
                        .HasForeignKey("SLCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CombinationTreatment");

                    b.Navigation("InjectionMethod");

                    b.Navigation("Medication");

                    b.Navigation("SLCase");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.Referral", b =>
                {
                    b.HasOne("Data.Model.Entities.Dictionary.DiagnosticMethod", "DiagnosticResearchMethod")
                        .WithMany()
                        .HasForeignKey("DiagnosticResearchMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.DirectionType", "DirectionType")
                        .WithMany()
                        .HasForeignKey("DirectionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.MedicalCompany.MedicalCompany", "MedicalCompany")
                        .WithMany()
                        .HasForeignKey("MedicalCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.MedicalService", "MedicalService")
                        .WithMany()
                        .HasForeignKey("MedicalServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Invoice.SLCase", "SLCase")
                        .WithMany()
                        .HasForeignKey("SLCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiagnosticResearchMethod");

                    b.Navigation("DirectionType");

                    b.Navigation("MedicalCompany");

                    b.Navigation("MedicalService");

                    b.Navigation("SLCase");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.SLCase", b =>
                {
                    b.HasOne("Data.Model.Entities.Dictionary.BedMedProfile", "BedMedProfile")
                        .WithMany()
                        .HasForeignKey("BedMedProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.CharacterDisease", "CharacterDisease")
                        .WithMany()
                        .HasForeignKey("CharacterDiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.MedSpecial", "DoctorSpecialty")
                        .WithMany()
                        .HasForeignKey("DoctorSpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.MedProfile", "MedProfile")
                        .WithMany()
                        .HasForeignKey("MedProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.MedicalCompany.MedicalCompanyDepartment", "MedicalCompanyDepartment")
                        .WithMany()
                        .HasForeignKey("MedicalCompanyDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.MedicalCompany.MedicalCompanyUnit", "MedicalCompanyUnit")
                        .WithMany()
                        .HasForeignKey("MedicalCompanyUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.VMPMethod", "VMPMethod")
                        .WithMany()
                        .HasForeignKey("VMPMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.VidVMP", "VidVMP")
                        .WithMany()
                        .HasForeignKey("VidVMPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.VisitPurpose", "VisitPurpose")
                        .WithMany()
                        .HasForeignKey("VisitPurposeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Invoice.ZAPMainRecord", "ZapMainRecord")
                        .WithMany()
                        .HasForeignKey("ZapMainRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BedMedProfile");

                    b.Navigation("CharacterDisease");

                    b.Navigation("DoctorSpecialty");

                    b.Navigation("MedProfile");

                    b.Navigation("MedicalCompanyDepartment");

                    b.Navigation("MedicalCompanyUnit");

                    b.Navigation("VMPMethod");

                    b.Navigation("VidVMP");

                    b.Navigation("VisitPurpose");

                    b.Navigation("ZapMainRecord");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.SLCaseDiagnosis", b =>
                {
                    b.HasOne("Data.Model.Entities.Dictionary.Diagnosis", "Diagnosis")
                        .WithMany()
                        .HasForeignKey("DiagnosisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Invoice.SLCase", "SLCase")
                        .WithMany()
                        .HasForeignKey("SLCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagnosis");

                    b.Navigation("SLCase");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.SLCaseSanction", b =>
                {
                    b.HasOne("Data.Model.Entities.Invoice.SLCase", "SLCase")
                        .WithMany()
                        .HasForeignKey("SLCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Invoice.Sanction", "Sanction")
                        .WithMany()
                        .HasForeignKey("SanctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SLCase");

                    b.Navigation("Sanction");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.Sanction", b =>
                {
                    b.HasOne("Data.Model.Entities.Dictionary.ControlType", "ControlType")
                        .WithMany()
                        .HasForeignKey("ControlTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.RefusalReason", "RefusalReason")
                        .WithMany()
                        .HasForeignKey("RefusalReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Invoice.ZAPMainRecord", "ZAPMainRecord")
                        .WithMany()
                        .HasForeignKey("ZAPMainRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ControlType");

                    b.Navigation("RefusalReason");

                    b.Navigation("ZAPMainRecord");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.SanctionExpert", b =>
                {
                    b.HasOne("Data.Model.Entities.Dictionary.ExpertReestr", "ExpertReestr")
                        .WithMany()
                        .HasForeignKey("ExpertReestrId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Invoice.Sanction", "Sanction")
                        .WithMany()
                        .HasForeignKey("SanctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExpertReestr");

                    b.Navigation("Sanction");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.USLService", b =>
                {
                    b.HasOne("Data.Model.Entities.Dictionary.Diagnosis", "Diagnosis")
                        .WithMany()
                        .HasForeignKey("DiagnosisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.MedProfile", "MedProfile")
                        .WithMany()
                        .HasForeignKey("MedProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.MedSpecial", "MedSpecial")
                        .WithMany()
                        .HasForeignKey("MedSpecialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.MedicalCompany.MedicalCompanyDepartment", "MedicalCompanyDepartment")
                        .WithMany()
                        .HasForeignKey("MedicalCompanyDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.MedicalCompany.MedicalCompany", "MedicalCompany")
                        .WithMany()
                        .HasForeignKey("MedicalCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.MedicalCompany.MedicalCompanyUnit", "MedicalCompanyUnit")
                        .WithMany()
                        .HasForeignKey("MedicalCompanyUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.MedicalService", "MedicalInterventionType")
                        .WithMany()
                        .HasForeignKey("MedicalInterventionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.MedicalService", "MedicalService")
                        .WithMany()
                        .HasForeignKey("MedicalServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Invoice.SLCase", "SlCase")
                        .WithMany()
                        .HasForeignKey("SlCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.VMPMethod", "VMPMethod")
                        .WithMany()
                        .HasForeignKey("VMPMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagnosis");

                    b.Navigation("MedProfile");

                    b.Navigation("MedSpecial");

                    b.Navigation("MedicalCompany");

                    b.Navigation("MedicalCompanyDepartment");

                    b.Navigation("MedicalCompanyUnit");

                    b.Navigation("MedicalInterventionType");

                    b.Navigation("MedicalService");

                    b.Navigation("SlCase");

                    b.Navigation("VMPMethod");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.ZAPMainRecord", b =>
                {
                    b.HasOne("Data.Model.Entities.MedicalCompany.MedicalCompany", "DirectedMO")
                        .WithMany()
                        .HasForeignKey("DirectedMOId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.FormPom", "FormPom")
                        .WithMany()
                        .HasForeignKey("FormPomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Invoice.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.Ishod", "Ishod")
                        .WithMany()
                        .HasForeignKey("IshodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.MedicalCompany.MedicalCompany", "MedicalCompany")
                        .WithMany()
                        .HasForeignKey("MedicalCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Person.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Policy.Policy", "Policy")
                        .WithMany()
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.ResultDisp", "ResultDisp")
                        .WithMany()
                        .HasForeignKey("ResultDispId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.Result", "Result")
                        .WithMany()
                        .HasForeignKey("ResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.UMP", "UMP")
                        .WithMany()
                        .HasForeignKey("UMPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.VidPom", "VidPom")
                        .WithMany()
                        .HasForeignKey("VidPomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.VidSluch", "VidSluch")
                        .WithMany()
                        .HasForeignKey("VidSluchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DirectedMO");

                    b.Navigation("FormPom");

                    b.Navigation("Invoice");

                    b.Navigation("Ishod");

                    b.Navigation("MedicalCompany");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Person");

                    b.Navigation("Policy");

                    b.Navigation("Result");

                    b.Navigation("ResultDisp");

                    b.Navigation("UMP");

                    b.Navigation("VidPom");

                    b.Navigation("VidSluch");
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.Сoncilium", b =>
                {
                    b.HasOne("Data.Model.Entities.Dictionary.ConsultationPurpose", "ConsultationPurpose")
                        .WithMany()
                        .HasForeignKey("ConsultationPurposeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Invoice.SLCase", "SLCase")
                        .WithMany("Сonciliums")
                        .HasForeignKey("SLCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConsultationPurpose");

                    b.Navigation("SLCase");
                });

            modelBuilder.Entity("Data.Model.Entities.MedicalCompany.MedicalCompanyDepartment", b =>
                {
                    b.HasOne("Data.Model.Entities.Dictionary.MedProfile", "MedProfile")
                        .WithMany()
                        .HasForeignKey("MedProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.MedicalCompany.MedicalCompany", "MedicalCompany")
                        .WithMany()
                        .HasForeignKey("MedicalCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.MedicalCompany.MedicalCompanyUnit", "MedicalCompanyUnit")
                        .WithMany()
                        .HasForeignKey("MedicalCompanyUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.UMP", "UMP")
                        .WithMany()
                        .HasForeignKey("UMPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.VidPom", "VidPom")
                        .WithMany()
                        .HasForeignKey("VidPomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedProfile");

                    b.Navigation("MedicalCompany");

                    b.Navigation("MedicalCompanyUnit");

                    b.Navigation("UMP");

                    b.Navigation("VidPom");
                });

            modelBuilder.Entity("Data.Model.Entities.MedicalCompany.MedicalCompanyUnit", b =>
                {
                    b.HasOne("Data.Model.Entities.MedicalCompany.MedicalCompany", "MedicalCompany")
                        .WithMany()
                        .HasForeignKey("MedicalCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalCompany");
                });

            modelBuilder.Entity("Data.Model.Entities.Policy.Policy", b =>
                {
                    b.HasOne("Data.Model.Entities.Person.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Dictionary.PolicyType", "PolicyType")
                        .WithMany()
                        .HasForeignKey("PolicyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("PolicyType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Data.Model.Entities.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Data.Model.Entities.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Entities.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Data.Model.Entities.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Model.Entities.Invoice.SLCase", b =>
                {
                    b.Navigation("Сonciliums");
                });
#pragma warning restore 612, 618
        }
    }
}
