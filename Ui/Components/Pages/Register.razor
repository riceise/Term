@page "/register"
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager

<style>
    .register-form {
        display: flex;
        flex-direction: column;
        align-items: center; 
        width: 300px;
        margin: 50px auto; 
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .form-group {
        margin-bottom: 15px;
    }

    label {
        display: block;
        margin-bottom: 5px;
    }

    input[type="text"],
    input[type="password"] {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 3px;
        box-sizing: border-box;
        border-color: #191c1f;
    }

    button[type="submit"] {
        background-color: #4169e1; 
        color: white;
        padding: 10px 15px;
        border: none;
        border-radius: 3px;
        cursor: pointer;
        width: 100%; 
    }

    button[type="submit"]:hover {
        background-color: #284b90;
    }

    .password-input {
        position: relative;
    }

    ul {
        list-style-type: none; 
        padding: 0; 
    }

    li {
        color: red; 
        margin-bottom: 5px;
    }
</style>

<div class="register-form">
    <h3>Регистрация</h3>

    <EditForm Model="@registerModel" OnValidSubmit="HandleRegistration">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label>Имя пользователя:</label>
            <InputText @bind-Value="registerModel.UserName" />
        </div>
        <div class="form-group">
            <label>Email:</label>
            <InputText @bind-Value="registerModel.Email" />
        </div>
        <div class="form-group password-input">
            <label>Пароль:</label>
            <InputText @bind-Value="registerModel.Password" Type="password" />
        </div>

        @if (errorMessages.Any())
        {
            <div>
                <ul>
                    @foreach (var error in errorMessages)
                    {
                        <li>@error</li>
                    }
                </ul>
            </div>
        }

        <button type="submit">Зарегистрироваться</button>
    </EditForm>

    
</div>

@code {
    private RegisterModel registerModel = new RegisterModel();
    private List<string> errorMessages = new List<string>();
    private string errorMessage;
    
    private async Task HandleRegistration()
    {   
        var HttpClient = HttpClientFactory.CreateClient("BackendAPI");
        var response = await HttpClient.PostAsJsonAsync("api/Auth/register", registerModel);

        if(response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            var result = await response.Content.ReadFromJsonAsync<ErrorResponse>();
            errorMessages = result.Errors?.ToList() ?? new List<string>();

            // Если нет подробных ошибок, добавляем общее сообщение
            if (!errorMessages.Any() && !string.IsNullOrEmpty(result.Message))
            {
                errorMessages.Add(result.Message);
            }
        }
    }

    private class ErrorResponse
    {
        public string Status { get; set; }
        public string Message { get; set; }
        public IEnumerable<string> Errors { get; set; }
    }
}
