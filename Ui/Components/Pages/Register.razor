@page "/register"
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager

<style>
    .register-form {
        max-width: 400px;
        margin: 0 auto;
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 10px;
        background-color: #f9f9f9;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .register-form h3 {
        text-align: center;
        color: #333;
        margin-bottom: 20px;
        font-size: 1.5rem;
        font-weight: 500;
    }

    .register-form .form-group {
        margin-bottom: 15px;
    }

    .register-form label {
        display: block;
        margin-bottom: 5px;
        font-weight: 500;
        color: #555;
        text-align: left;
    }

    .register-form input {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        font-size: 1rem;
    }

    .register-form .password-input input {
        font-family: 'Courier New', Courier, monospace;
        letter-spacing: 1px;
    }

    .register-form button {
        width: 100%;
        padding: 10px;
        background-color: #007bff;
        color: #fff;
        border: none;
        border-radius: 5px;
        font-size: 1rem;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .register-form button:hover {
        background-color: #0056b3;
    }

    .register-form ul {
        list-style-type: none;
        padding: 0;
        color: #d9534f;
        font-size: 0.9rem;
        text-align: left;
    }

    .register-form ul li {
        margin-bottom: 5px;
    }

    .register-form div {
        text-align: left;
        margin-top: 15px;
    }
</style>



<div class="register-form">
    <h3>Регистрация</h3>

    <EditForm Model="@registerModel" OnValidSubmit="HandleRegistration">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label>Имя пользователя:</label>
            <InputText @bind-Value="registerModel.UserName" />
        </div>
        <div class="form-group">
            <label>Email:</label>
            <InputText @bind-Value="registerModel.Email" />
        </div>
        <div class="form-group password-input">
            <label>Пароль:</label>
            <InputText @bind-Value="registerModel.Password" Type="password" />
        </div>
        <button type="submit">Зарегистрироваться</button>
    </EditForm>

    @if (errorMessages.Any())
    {
        <div>
            <ul>
                @foreach (var error in errorMessages)
                {
                    <li>@error</li>
                }
            </ul>
        </div>
    }
</div>

@code {
    private RegisterModel registerModel = new RegisterModel();
    private List<string> errorMessages = new List<string>();
    private string errorMessage;
    
    private async Task HandleRegistration()
    {   
        var HttpClient = HttpClientFactory.CreateClient("BackendAPI");
        var response = await HttpClient.PostAsJsonAsync("api/Auth/register", registerModel);

        if(response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            var result = await response.Content.ReadFromJsonAsync<ErrorResponse>();
            errorMessages = result.Errors?.ToList() ?? new List<string>();

            // Если нет подробных ошибок, добавляем общее сообщение
            if (!errorMessages.Any() && !string.IsNullOrEmpty(result.Message))
            {
                errorMessages.Add(result.Message);
            }
        }
    }

    private class ErrorResponse
    {
        public string Status { get; set; }
        public string Message { get; set; }
        public IEnumerable<string> Errors { get; set; }
    }
}
