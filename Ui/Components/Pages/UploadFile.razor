@page "/uploadingFiles"
@attribute [Authorize]
@inject IHttpClientFactory HttpClientFactory
@using System.Text.Json
@using Share.DTOs
@using Ui.Components.Helper

<h3>Загрузка Excel файла</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
<div class="alert alert-danger">
    <h5>@errorMessage</h5>
</div>
}

@if (errorList != null && errorList.Count > 0)
{
<div class="alert alert-danger">
    <h5>Ошибки:</h5>
    <div class="error-list">
        <ul>
            @foreach (var error in errorList)
            {
            <li>@error</li>
            }
        </ul>
    </div>
</div>
}

@if (!string.IsNullOrEmpty(successMessage))
{
<div class="alert alert-success">@successMessage</div>
}

<div>
    <InputFile OnChange="OnInputFileChange" />
</div>

<div>
    <button class="btn btn-primary" @onclick="SubmitFile">Upload</button>
</div>

@if (showConfirmationDialog)
{
<div class="modal show" tabindex="-1" style="display:block; background-color: rgba(0,0,0,0.5);">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Подтвердите перенос данных</h5>
            </div>
            <div class="modal-body">
                <p>Файл успешно загружен. Нажмите "Перенести данные", чтобы переместить их в основную таблицу.</p>
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary" @onclick="TransferDataToMainTable">Перенести данные</button>
            </div>
        </div>
    </div>
</div>
}

<style>
    .error-list {
        max-height: 600px;
        overflow-y: auto;
        border: 1px solid #e74c3c;
        padding: 10px;
        background-color: #f8d7da;
    }

    .error-list ul {
        list-style-type: disc;
        padding-left: 20px;
    }

    .alert-danger h5 {
        margin-bottom: 10px;
    }
</style>

@code 
{
    private IBrowserFile selectedFile;
    private string errorMessage;
    private string successMessage;
    private List<string> errorList = new();
    private bool showConfirmationDialog = false;

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }

    private async Task SubmitFile()
    {
        errorMessage = string.Empty;
        successMessage = string.Empty;
        errorList.Clear();

        var Http = HttpClientFactory.CreateClient("BackendAPI");

        if (selectedFile != null)
        {
            try
            {
                var content = new MultipartFormDataContent();
                var fileStream = selectedFile.OpenReadStream();
                var streamContent = new StreamContent(fileStream);
                content.Add(streamContent, "file", selectedFile.Name);

                var response = await Http.PostAsync($"api/SpiskiNaDNFromMO/upload", content);
                var responseContent = await response.Content.ReadAsStringAsync();

                if (response.IsSuccessStatusCode)
                {
                    successMessage = "Файл успешно загружен!";
                    showConfirmationDialog = true; // Показываем модальное окно
                }
                else
                {
                    try
                    {
                        var errorResponse = JsonSerializer.Deserialize<ErrorResponse>(responseContent, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                        if (errorResponse != null && errorResponse.Errors != null && errorResponse.Errors.Any())
                        {
                            errorList = errorResponse.Errors;
                            errorMessage = errorResponse.Message ?? "На сервере произошли ошибки валидации.";
                        }
                        else if (errorResponse != null && !string.IsNullOrEmpty(errorResponse.Message))
                        {
                            errorMessage = errorResponse.Message;
                        }
                        else
                        {
                            errorMessage = $"Неожиданный формат ошибки. Подробности смотрите в консоли.";
                            Console.WriteLine($"Неожиданный ответ с ошибкой: {responseContent}");
                        }
                    }
                    catch (JsonException ex)
                    {
                        errorMessage = "Не удалось разобрать ответ с ошибкой. Подробности смотрите в консоли.";
                        Console.WriteLine($"Ошибка разбора JSON: {ex.Message}\nСодержимое ответа: {responseContent}");
                    }
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"An error occurred: {ex.Message}";
            }
        }
        else
        {
            errorMessage = "Please select a file.";
        }
    }

    private async Task TransferDataToMainTable()
    {
        var Http = HttpClientFactory.CreateClient("BackendAPI");
        try
        {
            var response = await Http.PostAsync("api/SpiskiNaDNFromMO/transfer", null);
            if (response.IsSuccessStatusCode)
            {
                successMessage = "Данные успешно перенесены из временной таблицы в основную таблицу.";
            }
            else
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Ошибка при переносе данных: {responseContent}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Произошла ошибка при переносе данных: {ex.Message}";
        }
        finally
        {
            showConfirmationDialog = false; 
        }
    }

    private class ErrorResponse
    {
        public string Message { get; set; }
        public List<string> Errors { get; set; }
    }
}